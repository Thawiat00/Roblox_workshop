-- ========================================
-- üìÑ State_Patrol.lua (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô Debug)
-- ========================================
local Config = require(game.ServerScriptService.ServerLocal.Config.NPCConfig)
local FootprintScanner = require(game.ServerScriptService.ServerLocal.NPCAI.Utils.FootprintScanner)
local PathfindingHelper = require(game.ServerScriptService.ServerLocal.NPCAI.Utils.PathfindingHelper)

local function GetRandomPatrolPoint(centerPosition, radius)
    local angle = math.random() * math.pi * 2
    local distance = math.random() * radius
    
    local offsetX = math.cos(angle) * distance
    local offsetZ = math.sin(angle) * distance
    
    local point = Vector3.new(
        centerPosition.X + offsetX,
        centerPosition.Y,
        centerPosition.Z + offsetZ
    )
    
    print("üé≤ ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà:", point, "‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á", distance, "studs")
    return point
end

return {
    Enter = function(npc)
        print("=" .. string.rep("=", 50))
        print("üö∂ ENTER PATROL STATE")
        print("=" .. string.rep("=", 50))
        
        npc.humanoid.WalkSpeed = Config.States.Patrol.Speed
        print("‚ö° WalkSpeed:", npc.humanoid.WalkSpeed)
        
        -- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        if not npc.spawnPosition then
            npc.spawnPosition = npc.root.Position
            print("üìç Spawn Position:", npc.spawnPosition)
        end
        
        -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Root
        print("üîç Root Anchored?", npc.root.Anchored)
        if npc.root.Anchored then
            warn("‚ö†Ô∏è Root is Anchored! ‡∏õ‡∏•‡∏î Anchor...")
            npc.root.Anchored = false
        end
        
        -- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
        npc.patrolTarget = nil
        npc.patrolWaitTimer = 0
        npc.patrolWaitDuration = math.random(
            Config.States.Patrol.MinWaitTime,
            Config.States.Patrol.MaxWaitTime
        )
        npc.isWaitingAtPoint = false
        npc.footprintScanTimer = 0
        npc.pathTimer = 0
        npc.waypoints = nil
        npc.waypointIndex = 1
        
        print("‚è±Ô∏è ‡∏à‡∏∞‡∏£‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤:", npc.patrolWaitDuration, "‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
        
        -- ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏£‡∏Å
        npc.patrolTarget = GetRandomPatrolPoint(
            npc.spawnPosition,
            Config.States.Patrol.WanderRadius
        )
        
        print("=" .. string.rep("=", 50))
    end,
    
    Update = function(npc, target, distance)
        -- ======== 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ========
        if target and distance <= Config.States.Patrol.PlayerDetectRange then
            print("üëÅÔ∏è ‡πÄ‡∏à‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô! ‚Üí Chase")
            return "Chase"
        end
        
        -- ======== 2. ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤‡∏£‡∏≠‡∏¢‡πÄ‡∏ó‡πâ‡∏≤ ========
        npc.footprintScanTimer = npc.footprintScanTimer + (npc.deltaTime or 0)
        
        if npc.footprintScanTimer >= Config.States.Patrol.FootprintScanInterval then
            npc.footprintScanTimer = 0
            
            local footprints = FootprintScanner.ScanFootprints(
                npc.root.Position,
                Config.States.FollowFootprint.ScanRadius,
                Config.States.FollowFootprint.FootprintTag
            )
            
            if footprints and #footprints > 0 then
                print("ü¶∂ ‡πÄ‡∏à‡∏≠‡∏£‡∏≠‡∏¢‡πÄ‡∏ó‡πâ‡∏≤! ‚Üí FollowFootprint")
                return "FollowFootprint"
            end
        end
        
        -- ======== 3. ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠ ========
        if npc.isWaitingAtPoint then
            npc.patrolWaitTimer = npc.patrolWaitTimer + (npc.deltaTime or 0)
            npc.humanoid:MoveTo(npc.root.Position)
            
            -- ‡πÅ‡∏™‡∏î‡∏á progress bar
            local progress = math.floor((npc.patrolWaitTimer / npc.patrolWaitDuration) * 100)
            if progress % 20 == 0 then
                print("‚è≥ ‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà...", progress .. "%")
            end
            
            if npc.patrolWaitTimer >= npc.patrolWaitDuration then
                print("‚úÖ ‡∏£‡∏≠‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß! ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà")
                
                npc.isWaitingAtPoint = false
                npc.patrolWaitTimer = 0
                npc.patrolWaitDuration = math.random(
                    Config.States.Patrol.MinWaitTime,
                    Config.States.Patrol.MaxWaitTime
                )
                
                npc.patrolTarget = GetRandomPatrolPoint(
                    npc.spawnPosition,
                    Config.States.Patrol.WanderRadius
                )
                
                npc.waypoints = nil
                npc.waypointIndex = 1
            end
            
            return "Patrol"
        end
        
        -- ======== 4. ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ========
        if npc.patrolTarget then
            local distanceToTarget = (npc.root.Position - npc.patrolTarget).Magnitude
            
            -- Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            if not npc.lastDistancePrint then
                npc.lastDistancePrint = 0
            end
            npc.lastDistancePrint = npc.lastDistancePrint + (npc.deltaTime or 0)
            
            if npc.lastDistancePrint >= 1 then
                print("üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢:", math.floor(distanceToTarget), "studs")
                npc.lastDistancePrint = 0
            end
            
            -- ‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
            if distanceToTarget <= Config.States.Patrol.StopDistance then
                print("üéØ ‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠", npc.patrolWaitDuration, "‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
                npc.isWaitingAtPoint = true
                npc.patrolWaitTimer = 0
                return "Patrol"
            end
            
            -- Pathfinding
            npc.pathTimer = npc.pathTimer + (npc.deltaTime or 0)
            
            if npc.pathTimer >= Config.Pathfinding.UpdateInterval then
                npc.pathTimer = 0
                
                print("üó∫Ô∏è ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Path ‡πÉ‡∏´‡∏°‡πà...")
                npc.waypoints = PathfindingHelper.CreatePath(npc, npc.patrolTarget)
                npc.waypointIndex = 1
                
                if not npc.waypoints or #npc.waypoints == 0 then
                    warn("‚ö†Ô∏è Pathfinding ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß! ‡πÑ‡∏°‡πà‡∏°‡∏µ waypoints")
                    print("üîÑ ‡∏•‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡πÅ‡∏ó‡∏ô...")
                    npc.humanoid:MoveTo(npc.patrolTarget)
                else
                    print("‚úÖ Pathfinding ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", #npc.waypoints, "waypoints")
                end
            end
            
            -- ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏° waypoints
            if npc.waypoints and npc.waypoints[npc.waypointIndex] then
                local wp = npc.waypoints[npc.waypointIndex]
                npc.humanoid:MoveTo(wp.Position)
                
                if wp.Action == Enum.PathWaypointAction.Jump then
                    npc.humanoid.Jump = true
                    print("ü¶ò ‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î!")
                end
                
                if (npc.root.Position - wp.Position).Magnitude < Config.Pathfinding.StopDistance then
                    npc.waypointIndex = npc.waypointIndex + 1
                    print("‚û°Ô∏è ‡πÑ‡∏õ‡∏¢‡∏±‡∏á waypoint ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:", npc.waypointIndex)
                end
            else
                -- Fallback
                npc.humanoid:MoveTo(npc.patrolTarget)
            end
        end
        
        return "Patrol"
    end,
    
    Exit = function(npc)
        print("üö™ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Patrol")
        npc.patrolTarget = nil
        npc.patrolWaitTimer = 0
        npc.isWaitingAtPoint = false
        npc.footprintScanTimer = 0
        npc.waypoints = nil
        npc.lastDistancePrint = nil
    end
}