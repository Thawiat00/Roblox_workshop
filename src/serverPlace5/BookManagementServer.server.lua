-- ========================================
-- üñ•Ô∏è SERVER SCRIPT: BookManagementServer
-- ========================================

local ReplicatedStorage = game:GetService("ReplicatedStorage")


local Players = game:GetService("Players")



-- ‡πÇ‡∏´‡∏•‡∏î Config
--local Config = ReplicatedStorage:WaitForChild("Config")

--local ItemConfig = require(Config:WaitForChild("ItemConfig"))
--local ItemConfig = require(game.ServerScriptService.ServerLocal.Core.ite)

local ItemConfig = require(game.ServerScriptService.ServerLocal.Config.ItemConfig)



-- ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏£‡∏±‡∏ö Remote Events

local Common = ReplicatedStorage:WaitForChild("Common")
local equipBookEvent = Common:WaitForChild("EquipBook")

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á PlaceBook RemoteEvent
local placeBookEvent = Instance.new("RemoteEvent")
placeBookEvent.Name = "PlaceBook"
placeBookEvent.Parent = Common

print("‚úÖ [Server] Remote Events created")

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏¢‡∏¥‡∏ö‡∏™‡∏°‡∏∏‡∏î
equipBookEvent.OnServerEvent:Connect(function(player, bookObject)
    print("üì• [Server] Received pickup request from", player.Name)
    
    local character = player.Character
    if not character then 
        warn("‚ö†Ô∏è [Server] No character found")
        return 
    end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then 
        warn("‚ö†Ô∏è [Server] No HumanoidRootPart")
        return 
    end
    
    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ bookObject ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    if not bookObject or not bookObject.Parent then
        warn("‚ö†Ô∏è [Server] Book object is nil or destroyed")
        return
    end
    
    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
    local bookPos
    if bookObject:IsA("Model") then
        local primaryPart = bookObject.PrimaryPart or bookObject:FindFirstChildWhichIsA("BasePart")
        if primaryPart then
            bookPos = primaryPart.Position
        end
    else
        bookPos = bookObject.Position
    end


    
    if not bookPos then
        warn("‚ö†Ô∏è [Server] Cannot get book position")
        return
    end
    
    local distance = (humanoidRootPart.Position - bookPos).Magnitude
    if distance > 15 then 
        warn("‚ö†Ô∏è [Server] Player too far from book:", distance)
        return 
    end
    
    -- ‡∏î‡∏∂‡∏á Attribute ItemBook
    local bookId = bookObject:GetAttribute("ItemBook")
    if not bookId then
        warn("‚ö†Ô∏è [Server] Book has no ItemBook attribute")
        return
    end
    
    print("üìñ [Server] Picking up Book_" .. bookId)
    
    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á Tool ‡∏™‡∏°‡∏∏‡∏î
    local book = Instance.new("Tool")
    book.Name = "Book_" .. bookId
    book.RequiresHandle = true
    book.CanBeDropped = false
    
    -- ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• bookId ‡πÉ‡∏ô Tool
    book:SetAttribute("BookId", bookId)
    
    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á Handle
    local handle = Instance.new("Part")
    handle.Name = "Handle"
    handle.Size = Vector3.new(1, 1.5, 0.2)
    handle.BrickColor = BrickColor.new("Brown")
    handle.CanCollide = false
    handle.Parent = book
    
    -- ‡πÉ‡∏™‡πà‡∏™‡∏°‡∏∏‡∏î‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    book.Parent = player.Backpack
    
    -- ‡∏ã‡πà‡∏≠‡∏ô‡∏™‡∏°‡∏∏‡∏î‡πÉ‡∏ô‡πÇ‡∏•‡∏Å (‡πÑ‡∏°‡πà‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ)
    bookObject.Parent = ReplicatedStorage
    
    print("‚úÖ [Server] " .. player.Name .. " picked up Book_" .. bookId)
end)

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏á‡∏™‡∏°‡∏∏‡∏î
placeBookEvent.OnServerEvent:Connect(function(player, toolObject, shelfObject)
    print("üì• [Server] Received place request from", player.Name)
    
    local character = player.Character
    if not character then 
        warn("‚ö†Ô∏è [Server] No character")
        return 
    end
    
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    if not humanoidRootPart then 
        warn("‚ö†Ô∏è [Server] No HumanoidRootPart")
        return 
    end
    
    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ objects ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    if not toolObject or not toolObject.Parent then
        warn("‚ö†Ô∏è [Server] Tool is nil or destroyed")
        return
    end
    
    if not shelfObject or not shelfObject.Parent then
        warn("‚ö†Ô∏è [Server] Shelf is nil or destroyed")
        return
    end
    
    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô
    local shelfPos
    if shelfObject:IsA("Model") then
        local primaryPart = shelfObject.PrimaryPart or shelfObject:FindFirstChildWhichIsA("BasePart")
        if primaryPart then
            shelfPos = primaryPart.Position
        end
    else
        shelfPos = shelfObject.Position
    end
    
    if not shelfPos then
        warn("‚ö†Ô∏è [Server] Cannot get shelf position")
        return
    end
    
    local distance = (humanoidRootPart.Position - shelfPos).Magnitude
    if distance > 15 then
        warn("‚ö†Ô∏è [Server] Player too far from shelf:", distance)
        return
    end
    
    -- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏∏‡∏î
    local bookId = toolObject:GetAttribute("BookId")
    if not bookId then
        warn("‚ö†Ô∏è [Server] Tool has no BookId attribute")
        return
    end
    
    -- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏±‡πâ‡∏ô
    local shelfId = shelfObject:GetAttribute("table_shelf_for_book")
    if not shelfId then
        warn("‚ö†Ô∏è [Server] Shelf has no table_shelf_for_book attribute")
        return
    end
    
    print("üìö [Server] Checking placement: Book " .. bookId .. " ‚Üí Shelf " .. shelfId)
    
    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Config
    local configKey = "ItemBook_" .. bookId
    local bookConfig = ItemConfig[configKey]
    
    if not bookConfig then
        warn("‚ö†Ô∏è [Server] No config found for " .. configKey)
        return
    end
    
    local correctShelfId = bookConfig.table_shelf_for_book

    --local correct_
   
    
    --local unuse_book =  "ItemBook_999"


-- ‚úÖ Logic ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ItemBook_999
if correctShelfId == 999 then
    print("‚ö†Ô∏è [Server] Book_999 used at shelf " .. shelfId .. " ‚Üí Always fail but usable.")

    -- ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if bookConfig.alert_bot then
        print("ü§ñ [Server Alert] Book_999 triggered alert_bot for player:", player.Name)
        -- ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ ‡πÄ‡∏ä‡πà‡∏ô
        -- AlertBot:Fire(player, shelfId)
    end

    -- ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏™‡∏°‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    toolObject:Destroy()

    -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ß‡πà‡∏≤ "‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
    print("üí• [Server] Book_999 destroyed after failed placement")

    return
end


   -- if shelfId ~= unuse_book then
   --     warn("‚ùå [Server]  Book  999" .. bookId .. " should go to shelf " .. correctShelfId .. " but tried " .. shelfId)
   --     -- TODO: ‡∏™‡πà‡∏á feedback ‡πÑ‡∏õ client
   --     return
   -- end


    -- ‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á
    if shelfId ~= correctShelfId then
        warn("‚ùå [Server] Wrong shelf! Book " .. bookId .. " should go to shelf " .. correctShelfId .. " but tried " .. shelfId)
        -- TODO: ‡∏™‡πà‡∏á feedback ‡πÑ‡∏õ client
        return
    end

  
    
    -- ‚úÖ ‡∏ß‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà!
    print("‚úÖ [Server] Correct placement! Book " .. bookId .. " placed at shelf " .. shelfId)
    
    -- ‡∏•‡∏ö Tool ‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    toolObject:Destroy()
    
    -- ‡∏ô‡∏≥‡∏™‡∏°‡∏∏‡∏î‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÇ‡∏•‡∏Å (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    local bookFolder = workspace:FindFirstChild("Book_item")
    if bookFolder then
        local originalBook = ReplicatedStorage:FindFirstChild(toolObject.Name)
        if originalBook then
            originalBook.Parent = bookFolder
            print("üìñ [Server] Restored book to world")
        end
    end
    
    -- TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏° effects, sounds, rewards
end)

print("‚úÖ [Server] BookManagementServer loaded")
