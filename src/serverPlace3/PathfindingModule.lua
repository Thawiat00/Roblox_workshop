-- üì¶ ModuleScript: PathfindingModule
-- ‡∏ß‡∏≤‡∏á‡πÉ‡∏ô: ServerScriptService > PathfindingModule
-- ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏™‡∏£‡πâ‡∏≤‡∏á Path ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á NPC

local PathfindingModule = {}

local PathfindingService = game:GetService("PathfindingService")

-- üîπ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î Agent ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Rig (R6/R15)
function PathfindingModule.getAgentParams(humanoid)
	local agentRadius, agentHeight = 2, 5
	
	if humanoid.RigType == Enum.HumanoidRigType.R15 then
		agentRadius, agentHeight = 2.5, 6
	end
	
	return agentRadius, agentHeight
end

-- üîπ ‡∏™‡∏£‡πâ‡∏≤‡∏á Path ‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á NPC ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢
function PathfindingModule.createPath(npc, destination)
	local humanoid = npc:FindFirstChild("Humanoid")
	local hrp = npc:FindFirstChild("HumanoidRootPart")
	
	if not humanoid or not hrp then
		return nil
	end
	
	-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ destination ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà nil
	if not destination then
		warn("‚ö†Ô∏è Destination is nil for " .. npc.Name)
		return nil
	end
	
	local agentRadius, agentHeight = PathfindingModule.getAgentParams(humanoid)
	
	local path = PathfindingService:CreatePath({
		AgentRadius = agentRadius,
		AgentHeight = agentHeight,
		AgentCanJump = true,
		AgentCanClimb = false,
		WaypointSpacing = 3,  -- ‡∏•‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á waypoint
		Costs = {
			Water = math.huge,  -- ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≥
			Ice = math.huge,    -- ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏ô‡πâ‡∏≥‡πÅ‡∏Ç‡πá‡∏á
		}
	})
	
	local success, err = pcall(function()
		path:ComputeAsync(hrp.Position, destination)
	end)
	
	if success and path.Status == Enum.PathStatus.Success then
		return path
	else
		-- ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á warning ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏ö‡πà‡∏≠‡∏¢‡∏ï‡∏≠‡∏ô‡πÑ‡∏•‡πà
		return nil
	end
end

-- üîπ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏≤‡∏° Waypoints ‡∏Ç‡∏≠‡∏á Path
function PathfindingModule.moveAlongPath(npc, path)
	local humanoid = npc:FindFirstChild("Humanoid")
	if not humanoid then return false end
	
	local hrp = npc:FindFirstChild("HumanoidRootPart")
	if not hrp then return false end
	
	local waypoints = path:GetWaypoints()
	
	for i, wp in ipairs(waypoints) do
		-- ‡∏Ç‡πâ‡∏≤‡∏° waypoint ‡πÅ‡∏£‡∏Å (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
		if i == 1 then
			continue
		end
		
		-- ‡∏ñ‡πâ‡∏≤ Waypoint ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡πÇ‡∏î‡∏î
		if wp.Action == Enum.PathWaypointAction.Jump then
			humanoid:MoveTo(wp.Position)
			humanoid.Jump = true
		else
			humanoid:MoveTo(wp.Position)
		end
		
		-- ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ñ‡∏∂‡∏á waypoint ‡∏´‡∏£‡∏∑‡∏≠ timeout
		local timeout = 3  -- ‡∏£‡∏≠‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
		local startTime = tick()
		
		while (tick() - startTime) < timeout do
			if not npc.Parent or humanoid.Health <= 0 then
				return false
			end
			
			-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏∂‡∏á waypoint ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
			local distance = (hrp.Position - wp.Position).Magnitude
			if distance < 4 then
				break
			end
			
			task.wait(0.1)
		end
		
		-- ‡∏ñ‡πâ‡∏≤ timeout ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ waypoint ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
	end
	
	return true
end

-- üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Path ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô)
function PathfindingModule.moveDirectly(npc, destination)
	local humanoid = npc:FindFirstChild("Humanoid")
	if not humanoid then return false end
	
	humanoid:MoveTo(destination)
	
	local timeout = 5
	local startTime = tick()
	
	while (tick() - startTime) < timeout do
		if not npc.Parent then return false end
		
		local hrp = npc:FindFirstChild("HumanoidRootPart")
		if hrp and (hrp.Position - destination).Magnitude < 5 then
			return true
		end
		
		task.wait(0.1)
	end
	
	return false
end

return PathfindingModule