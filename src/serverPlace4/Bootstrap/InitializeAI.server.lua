-- ==========================================
-- Bootstrap/InitializeAI.server.lua (Script)
-- ==========================================
-- ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ó‡∏±‡πâ‡∏á Phase 1 ‡πÅ‡∏•‡∏∞ Phase 2
-- ‡∏ß‡∏≤‡∏á Script ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô ServerScriptService
-- ==========================================

-- ==========================================
-- ‚öôÔ∏è CONFIGURATION - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Phase ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
-- ==========================================
local CONFIG = {
    -- ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î Phase ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    EnablePhase1 = true,  -- true = ‡πÄ‡∏î‡∏¥‡∏ô‡∏™‡∏≥‡∏£‡∏ß‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÑ‡∏°‡πà‡πÑ‡∏•‡πà player)
    EnablePhase2 = true,  -- true = ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÑ‡∏•‡πà player (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î Phase1 ‡∏î‡πâ‡∏ß‡∏¢)
    EnablePhase3 = true,  -- ‚ú® ‡∏û‡∏∏‡πà‡∏á‡πÉ‡∏™‡πà player + knockback

    -- Debug Options
    ShowDetailedLogs = true,  -- ‡πÅ‡∏™‡∏î‡∏á log ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    ShowConfig = true,        -- ‡πÅ‡∏™‡∏î‡∏á config ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°
    
    -- Startup Options
    AutoStart = true,         -- ‡πÄ‡∏£‡∏¥‡πà‡∏° AI ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏•‡∏¢
    StartDelay = 1,           -- ‡∏£‡∏≠‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏° (‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô)
}

-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dependencies
if CONFIG.EnablePhase3 and not CONFIG.EnablePhase2 then
    warn("[AI System] ‚ö†Ô∏è Phase 3 requires Phase 2 to be enabled!")
    CONFIG.EnablePhase2 = true
end


-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Config
if CONFIG.EnablePhase2 and not CONFIG.EnablePhase1 then
    warn("[AI System] ‚ö†Ô∏è Phase 2 requires Phase 1 to be enabled!")
    CONFIG.EnablePhase1 = true
end

-- ==========================================
-- ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
-- ==========================================
print("===========================================")
if CONFIG.EnablePhase1 and CONFIG.EnablePhase2 and CONFIG.EnablePhase3 then
    print("[AI System] üéÆ Starting AI System (Phase 1 + 2 + 3)")
    print("[AI System] ‚úÖ Walk + Chase + Spear Dash Enabled")
elseif CONFIG.EnablePhase1 and CONFIG.EnablePhase2 then
    print("[AI System] üéÆ Starting AI System (Phase 1 + 2)")
    print("[AI System] ‚úÖ Walk + Chase Enabled")
elseif CONFIG.EnablePhase1 then
    print("[AI System] üéÆ Starting AI System (Phase 1)")
    print("[AI System] ‚úÖ Walk Only Enabled")
else
    warn("[AI System] ‚ùå No phases enabled!")
    return
end
print("===========================================")

-- ==========================================
-- ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°
-- ==========================================
if CONFIG.StartDelay > 0 then
    print("[AI System] ‚è≥ Waiting", CONFIG.StartDelay, "seconds for system initialization...")
    wait(CONFIG.StartDelay)
end

-- ==========================================
-- ‡πÇ‡∏´‡∏•‡∏î Dependencies
-- ==========================================
local SimpleWalkController, SimpleEnemyRepository, SimpleAIConfig

local success, err = pcall(function()
    SimpleWalkController = require(game.ServerScriptService.ServerLocal.Presentation.Controllers.SimpleWalkController)
    SimpleEnemyRepository = require(game.ServerScriptService.ServerLocal.Infrastructure.Repositories.SimpleEnemyRepository)
    SimpleAIConfig = require(game.ServerScriptService.ServerLocal.Infrastructure.Data.SimpleAIConfig)
end)

if not success then
    warn("[AI System] ‚ùå Failed to load dependencies!")
    warn("[AI System] Error:", err)
    warn("[AI System] üí° Check if these files exist:")
    warn("  ‚Ä¢ ServerScriptService/ServerLocal/Presentation/Controllers/SimpleWalkController")
    warn("  ‚Ä¢ ServerScriptService/ServerLocal/Infrastructure/Repositories/SimpleEnemyRepository")
    warn("  ‚Ä¢ ServerScriptService/ServerLocal/Infrastructure/Data/SimpleAIConfig")
    return
end

print("[AI System] ‚úÖ Dependencies loaded successfully")

-- ==========================================
-- ‡πÅ‡∏™‡∏î‡∏á Configuration
-- ==========================================
if CONFIG.ShowConfig then
    print("[AI System] üìã Configuration:")
    print("  ‚Ä¢ Walk Speed:", SimpleAIConfig.WalkSpeed)
    
    if CONFIG.EnablePhase2 then
        print("  ‚Ä¢ Run Speed:", SimpleAIConfig.RunSpeed)
        print("  ‚Ä¢ Detection Range:", SimpleAIConfig.DetectionRange, "studs")
        print("  ‚Ä¢ Detection Interval:", SimpleAIConfig.DetectionCheckInterval, "seconds")
        print("  ‚Ä¢ Chase Update:", SimpleAIConfig.ChaseUpdateInterval, "seconds")
    end


    if CONFIG.EnablePhase3 then
        print("  ‚Ä¢ Spear Speed:", SimpleAIConfig.SpearSpeed)
        print("  ‚Ä¢ Dash Min Distance:", SimpleAIConfig.DashMinDistance, "studs")
        print("  ‚Ä¢ Dash Max Distance:", SimpleAIConfig.DashMaxDistance, "studs")
        print("  ‚Ä¢ Dash Chance:", SimpleAIConfig.DashChance * 100, "%")
        print("  ‚Ä¢ Dash Duration:", SimpleAIConfig.DashDurationMin, "-", SimpleAIConfig.DashDurationMax, "seconds")
        print("  ‚Ä¢ Knockback Force:", SimpleAIConfig.KnockbackForce)
        print("  ‚Ä¢ Recover Duration:", SimpleAIConfig.RecoverDuration, "seconds")
    end
    
    print("  ‚Ä¢ Wander Radius:", SimpleAIConfig.WanderRadius)
    print("  ‚Ä¢ Walk Duration:", SimpleAIConfig.WalkDuration, "seconds")
    print("  ‚Ä¢ Idle Duration:", SimpleAIConfig.IdleDuration, "seconds")
    print("===========================================")
end

-- ==========================================
-- Repository (Singleton)
-- ==========================================
local repo = SimpleEnemyRepository.GetInstance()

-- ==========================================
-- ‡∏´‡∏≤ Enemies Folder
-- ==========================================
local enemiesFolder = workspace:FindFirstChild("Enemies")

if not enemiesFolder then
    warn("[AI System] ‚ùå No 'Enemies' folder found in workspace!")
    warn("[AI System] üí° Creating 'Enemies' folder...")
    
    enemiesFolder = Instance.new("Folder")
    enemiesFolder.Name = "Enemies"
    enemiesFolder.Parent = workspace
    
    warn("[AI System] üìù Please add enemy models to the 'Enemies' folder")
    warn("[AI System] üìù Enemy models must have: Humanoid + HumanoidRootPart")
    return
end

-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ enemy ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
local enemyCount = 0
for _, child in ipairs(enemiesFolder:GetChildren()) do
    if child:IsA("Model") then
        enemyCount = enemyCount + 1
    end
end

if enemyCount == 0 then
    warn("[AI System] ‚ö†Ô∏è 'Enemies' folder is empty!")
    warn("[AI System] üí° Add enemy models (with Humanoid) to start AI")
    return
end

print("[AI System] üéØ Found", enemyCount, "enemy models")

-- ==========================================
-- ‡πÄ‡∏£‡∏¥‡πà‡∏° AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
-- ==========================================
local activeControllers = {}
local successCount = 0
local failCount = 0
local startedCount = 0

for _, enemyModel in ipairs(enemiesFolder:GetChildren()) do
    if enemyModel:IsA("Model") and enemyModel:FindFirstChild("Humanoid") then
        
        local success, controllerOrError = pcall(function()
            -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö HumanoidRootPart
            if not enemyModel:FindFirstChild("HumanoidRootPart") then
                error("Missing HumanoidRootPart")
            end
            
            -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Humanoid Health
            local humanoid = enemyModel:FindFirstChild("Humanoid")
            if humanoid.Health <= 0 then
                humanoid.Health = humanoid.MaxHealth
            end
            
            -- ‡∏™‡∏£‡πâ‡∏≤‡∏á enemy data
            if CONFIG.ShowDetailedLogs then
                print("[AI System] üîÑ Creating enemy data for:", enemyModel.Name)
            end
            
            local enemyData = repo:CreateSimpleEnemy(enemyModel)
            if not enemyData then
                error("Failed to create enemyData")
            end

            -- ‡∏™‡∏£‡πâ‡∏≤‡∏á Controller
            if CONFIG.ShowDetailedLogs then
                print("[AI System] ü§ñ Creating controller for:", enemyModel.Name)
            end
            
            local controller = SimpleWalkController.new(enemyModel)
            if not controller then
                error("Failed to create controller")
            end

            return controller
        end)
        
        if success then
            local controller = controllerOrError
            table.insert(activeControllers, controller)
            successCount = successCount + 1
            
            -- ‚≠ê ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ AI ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            if CONFIG.AutoStart then
                local startSuccess, startError = pcall(function()
                    -- ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
                    if controller.Start then
                        controller:Start()
                        startedCount = startedCount + 1
                    elseif controller.StartWalking then
                        controller:StartWalking()
                        startedCount = startedCount + 1
                    elseif controller.Initialize then
                        controller:Initialize()
                        startedCount = startedCount + 1
                    else
                        warn("[AI System] ‚ö†Ô∏è", enemyModel.Name, "- No Start method found")
                    end
                end)
                
                if not startSuccess then
                    warn("[AI System] ‚ö†Ô∏è", enemyModel.Name, "- Failed to start:", startError)
                end
            end
            
            -- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏° Phase ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
            local features = {}
            if CONFIG.EnablePhase1 then table.insert(features, "Walk") end
            if CONFIG.EnablePhase2 then table.insert(features, "Chase") end
            if CONFIG.EnablePhase3 then table.insert(features, "Dash") end

            
            local statusIcon = (CONFIG.AutoStart and startedCount == successCount) and "‚úÖ" or "‚ö†Ô∏è"
            print("[AI System]", statusIcon, enemyModel.Name, "- AI Controller Created (" .. table.concat(features, " + ") .. ")")
        else
            failCount = failCount + 1
            warn("[AI System] ‚ùå", enemyModel.Name, "- Failed:", controllerOrError)
        end
    else
        if enemyModel:IsA("Model") then
            warn("[AI System] ‚ö†Ô∏è", enemyModel.Name, "- Invalid model (no Humanoid)")
        end
    end
end

-- ==========================================
-- ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
-- ==========================================
print("===========================================")
print("[AI System] üìä Summary:")
print("[AI System] ‚úÖ Controllers Created:", successCount)
if CONFIG.AutoStart then
    print("[AI System] üöÄ AIs Started:", startedCount)
end

if failCount > 0 then
    warn("[AI System] ‚ùå Failed:", failCount)
end

if startedCount < successCount then
    warn("[AI System] ‚ö†Ô∏è Some AIs didn't start automatically")
    warn("[AI System] üí° Use _G.AISystem.StartAll() to start them manually")
end

print("[AI System] üéØ System Ready!")

if CONFIG.EnablePhase2 then
    print("[AI System] üîç Enemies will detect players within", SimpleAIConfig.DetectionRange, "studs")
    print("[AI System] üèÉ Enemies will chase at speed", SimpleAIConfig.RunSpeed)
end


if CONFIG.EnablePhase3 then
    print("[AI System] üöÄ Enemies can dash at speed", SimpleAIConfig.SpearSpeed, "when player is", SimpleAIConfig.DashMinDistance, "-", SimpleAIConfig.DashMaxDistance, "studs away")
    print("[AI System] üí• Knockback force:", SimpleAIConfig.KnockbackForce)
    print("[AI System] üé≤ Dash chance:", SimpleAIConfig.DashChance * 100, "%")
end


print("===========================================")

-- ==========================================
-- Global API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug
-- ==========================================
_G.AISystem = {
    -- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
    Config = CONFIG,
    Phase1Enabled = CONFIG.EnablePhase1,
    Phase2Enabled = CONFIG.EnablePhase2,
    Phase3Enabled = CONFIG.EnablePhase3,
    
    -- ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô AI
    GetActiveCount = function()
        return #activeControllers
    end,
    
    -- ‡∏î‡∏∂‡∏á Controllers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    GetControllers = function()
        return activeControllers
    end,
    
    -- ‡πÄ‡∏£‡∏¥‡πà‡∏° AI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°)
    StartAll = function()
        local count = 0
        for _, controller in ipairs(activeControllers) do
            local success = pcall(function()
                if controller.Start then
                    controller:Start()
                    count = count + 1
                elseif controller.StartWalking then
                    controller:StartWalking()
                    count = count + 1
                end
            end)
        end
        print("[AI System] Started", count, "AIs")
    end,
    
    -- ‡∏´‡∏¢‡∏∏‡∏î AI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    StopAll = function()
        local count = 0
        for _, controller in ipairs(activeControllers) do
            local success = pcall(function()
                if controller.Stop then
                    controller:Stop()
                    count = count + 1
                elseif controller.StopWalking then
                    controller:StopWalking()
                    count = count + 1
                end
            end)
        end
        print("[AI System] Stopped", count, "AIs")
    end,
    
    -- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï AI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    ResetAll = function()
        for _, controller in ipairs(activeControllers) do
            if controller.Reset then
                controller:Reset()
            end
        end
        print("[AI System] All AIs reset")
    end,
    
    -- ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AI ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
    DebugFirstEnemy = function()
        if #activeControllers > 0 then
            local controller = activeControllers[1]
            print("===========================================")
            print("[Debug] Enemy:", controller.Model.Name)
            
            if controller.EnemyData then
                print("[Debug] Has EnemyData:", true)
                print("[Debug] State:", controller.EnemyData.CurrentState or "N/A")
                print("[Debug] Speed:", controller.EnemyData.CurrentSpeed or "N/A")
                
                if CONFIG.EnablePhase2 then
                    print("[Debug] Is Chasing:", controller.IsChasing or false)
                    if controller.EnemyData.HasTarget then
                        print("[Debug] Has Target:", controller.EnemyData:HasTarget())
                        if controller.EnemyData:HasTarget() and controller.EnemyData.CurrentTarget then
                            print("[Debug] Target:", controller.EnemyData.CurrentTarget.Parent.Name)
                        end
                    end
                    print("[Debug] Detection State:", controller.EnemyData.DetectionState or "N/A")
                end


                 if CONFIG.EnablePhase3 then
                    print("[Debug] üöÄ Is Dashing:", controller.EnemyData.IsDashing or false)
                    print("[Debug] üòÆ‚Äçüí® Is Recovering:", controller.EnemyData:IsRecovering())
                    print("[Debug] ‚è≥ Can Dash:", controller.EnemyData:CanDash(tick()))
                    if controller.DashService then
                        print("[Debug] üéØ Dash Direction:", controller.DashService:GetDashDirection())
                    end
                end

            else
                print("[Debug] Has EnemyData:", false)
            end
            
            -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ
            print("[Debug] Available Methods:")
            if controller.Start then print("  ‚Ä¢ Start()") end
            if controller.Stop then print("  ‚Ä¢ Stop()") end
            if controller.StartWalking then print("  ‚Ä¢ StartWalking()") end
            if controller.StopWalking then print("  ‚Ä¢ StopWalking()") end
            if controller.StartChasing then print("  ‚Ä¢ StartChasing()") end
            if controller.StopChasing then print("  ‚Ä¢ StopChasing()") end

            if controller.StartDashing then print("  ‚Ä¢ StartDashing()") end

            
            print("===========================================")
        else
            warn("[Debug] No active enemies")
        end
    end,
    
    -- ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß
    ShowAllStatus = function()
        print("===========================================")
        print("[AI System] All Enemies Status:")
        for i, controller in ipairs(activeControllers) do
            local status = string.format(
                "%d. %s",
                i,
                controller.Model.Name
            )
            
            if controller.EnemyData then
                status = status .. string.format(
                    " | State: %s | Speed: %.1f",
                    controller.EnemyData.CurrentState or "N/A",
                    controller.EnemyData.CurrentSpeed or 0
                )
                
                if CONFIG.EnablePhase2 then
                    status = status .. string.format(" | Chasing: %s", tostring(controller.IsChasing or false))
                end


                if CONFIG.EnablePhase3 then
                    status = status .. string.format(" | Dashing: %s", tostring(controller.EnemyData.IsDashing or false))
                end

            else
                status = status .. " | No EnemyData"
            end
            
            print(status)
        end
        print("[AI System] Total:", #activeControllers, "enemies")
        print("===========================================")
    end,
    
    -- ‡πÅ‡∏™‡∏î‡∏á Config
    ShowConfig = function()
        print("===========================================")
        print("[AI System] Current Configuration:")
        print("  ‚Ä¢ Phase 1 (Walk):", CONFIG.EnablePhase1)
        print("  ‚Ä¢ Phase 2 (Chase):", CONFIG.EnablePhase2)

        print("  ‚Ä¢ Phase 3 (Dash):", CONFIG.EnablePhase3)


        print("  ‚Ä¢ Auto Start:", CONFIG.AutoStart)
        print("  ‚Ä¢ Walk Speed:", SimpleAIConfig.WalkSpeed)
        
        if CONFIG.EnablePhase2 then
            print("  ‚Ä¢ Run Speed:", SimpleAIConfig.RunSpeed)
            print("  ‚Ä¢ Detection Range:", SimpleAIConfig.DetectionRange)
            print("  ‚Ä¢ Detection Interval:", SimpleAIConfig.DetectionCheckInterval)
            print("  ‚Ä¢ Chase Update:", SimpleAIConfig.ChaseUpdateInterval)
        end
        

        if CONFIG.EnablePhase3 then
            print("  ‚Ä¢ Spear Speed:", SimpleAIConfig.SpearSpeed)
            print("  ‚Ä¢ Dash Range:", SimpleAIConfig.DashMinDistance, "-", SimpleAIConfig.DashMaxDistance)
            print("  ‚Ä¢ Knockback Force:", SimpleAIConfig.KnockbackForce)
        end

        print("  ‚Ä¢ Wander Radius:", SimpleAIConfig.WanderRadius)
        print("  ‚Ä¢ Walk Duration:", SimpleAIConfig.WalkDuration)
        print("  ‚Ä¢ Idle Duration:", SimpleAIConfig.IdleDuration)
        print("===========================================")
    end,
    
    -- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ AI ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°
    TestFirstEnemy = function()
        if #activeControllers > 0 then
            local controller = activeControllers[1]
            print("[AI System] üß™ Testing", controller.Model.Name)
            
            -- ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°
            if controller.Start then
                controller:Start()
                print("[AI System] ‚úÖ Called Start()")
            elseif controller.StartWalking then
                controller:StartWalking()
                print("[AI System] ‚úÖ Called StartWalking()")
            else
                warn("[AI System] ‚ùå No start method found")
            end
            
            wait(2)
            _G.AISystem.DebugFirstEnemy()
        else
            warn("[AI System] No enemies to test")
        end
    end,
}

-- ==========================================
-- Phase 2 Specific Commands
-- ==========================================
if CONFIG.EnablePhase2 then
    -- ‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏•‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    _G.AISystem.StopAllChase = function()
        local count = 0
        for _, controller in ipairs(activeControllers) do
            if controller.StopChasing then
                controller:StopChasing()
                count = count + 1
            end
        end
        print("[AI System] Stopped", count, "chase behaviors")
    end
    
    -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
    _G.AISystem.SetDetectionRange = function(newRange)
        local count = 0
        for _, controller in ipairs(activeControllers) do
            if controller.DetectionRange then
                controller.DetectionRange = newRange
                count = count + 1
            end
        end
        print("[AI System] Detection range changed to:", newRange, "for", count, "enemies")
    end
    
    -- ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÑ‡∏•‡πà player ‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    _G.AISystem.ForceChaseNearestPlayer = function()
        local players = game.Players:GetPlayers()
        if #players == 0 then
            warn("[AI System] No players in game")
            return
        end
        
        local chaseCount = 0
        for _, controller in ipairs(activeControllers) do
            local nearestPlayer = nil
            local shortestDistance = math.huge
            
            for _, player in ipairs(players) do
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local distance = (controller.RootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                    if distance < shortestDistance then
                        nearestPlayer = player.Character.HumanoidRootPart
                        shortestDistance = distance
                    end
                end
            end
            
            if nearestPlayer and controller.StartChasing then
                controller:StartChasing(nearestPlayer)
                chaseCount = chaseCount + 1
            end
        end
        
        print("[AI System]", chaseCount, "enemies forced to chase nearest player")
    end
end



-- ==========================================
-- ‚ú® Phase 3 Commands
-- ==========================================
if CONFIG.EnablePhase3 then
    -- ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏û‡∏∏‡πà‡∏á‡πÉ‡∏™‡πà player ‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    _G.AISystem.ForceDashNearestPlayer = function()
        local players = game.Players:GetPlayers()
        if #players == 0 then
            warn("[AI System] No players in game")
            return
        end
        
        local dashCount = 0
        for _, controller in ipairs(activeControllers) do
            -- ‡∏´‡∏≤ player ‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            local nearestPlayer = nil
            local shortestDistance = math.huge
            
            for _, player in ipairs(players) do
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local distance = (controller.RootPart.Position - player.Character.HumanoidRootPart.Position).Magnitude
                    if distance < shortestDistance then
                        nearestPlayer = player.Character.HumanoidRootPart
                        shortestDistance = distance
                    end
                end
            end
            
            -- ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏û‡∏∏‡πà‡∏á
            if nearestPlayer and controller.StartDashing then
                -- ‡∏ï‡∏±‡πâ‡∏á target ‡∏Å‡πà‡∏≠‡∏ô
                controller.CurrentTarget = nearestPlayer
                controller.IsChasing = true
                
                controller:StartDashing()
                dashCount = dashCount + 1
            end
        end
        
        print("[AI System] üöÄ", dashCount, "enemies forced to dash at nearest player")
    end
    
    -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏û‡∏∏‡πà‡∏á
    _G.AISystem.SetDashChance = function(newChance)
        if newChance < 0 or newChance > 1 then
            warn("[AI System] Dash chance must be between 0 and 1")
            return
        end
        
        SimpleAIConfig.DashChance = newChance
        print("[AI System] üé≤ Dash chance changed to:", newChance * 100, "%")
    end
    
    -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏£‡∏á Knockback
    _G.AISystem.SetKnockbackForce = function(newForce)
        SimpleAIConfig.KnockbackForce = newForce
        print("[AI System] üí• Knockback force changed to:", newForce)
    end
    
    -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ Dash
    _G.AISystem.SetDashRange = function(minDistance, maxDistance)
        SimpleAIConfig.DashMinDistance = minDistance
        SimpleAIConfig.DashMaxDistance = maxDistance
        print("[AI System] üéØ Dash range changed to:", minDistance, "-", maxDistance, "studs")
    end
    
    -- ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Dash
    _G.AISystem.ShowDashStats = function()
        print("===========================================")
        print("[AI System] üöÄ Dash Statistics:")
        local dashingCount = 0
        local recoveringCount = 0
        local canDashCount = 0
        
        for _, controller in ipairs(activeControllers) do
            if controller.DashService then
                if controller.DashService:IsDashing() then
                    dashingCount = dashingCount + 1
                end
                if controller.DashService:IsRecovering() then
                    recoveringCount = recoveringCount + 1
                end
                if controller.DashService:CanDash() then
                    canDashCount = canDashCount + 1
                end
            end
        end
        
        print("  ‚Ä¢ Currently Dashing:", dashingCount)
        print("  ‚Ä¢ Currently Recovering:", recoveringCount)
        print("  ‚Ä¢ Ready to Dash:", canDashCount)
        print("  ‚Ä¢ Total Enemies:", #activeControllers)
        print("===========================================")
    end
end


-- ==========================================
-- ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
-- ==========================================
print("\n[AI System] üí° Debug Commands:")
print("  _G.AISystem.GetActiveCount()      -- ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô AI")
print("  _G.AISystem.StartAll()            -- ‡πÄ‡∏£‡∏¥‡πà‡∏° AI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
print("  _G.AISystem.StopAll()             -- ‡∏´‡∏¢‡∏∏‡∏î AI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
print("  _G.AISystem.DebugFirstEnemy()     -- ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ AI ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å")
print("  _G.AISystem.ShowAllStatus()       -- ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß")
print("  _G.AISystem.TestFirstEnemy()      -- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö AI ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å")
print("  _G.AISystem.ResetAll()            -- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï AI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
print("  _G.AISystem.ShowConfig()          -- ‡πÅ‡∏™‡∏î‡∏á Config")

if CONFIG.EnablePhase2 then
    print("\n[AI System] üèÉ Phase 2 Commands:")
    print("  _G.AISystem.StopAllChase()        -- ‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏•‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    print("  _G.AISystem.SetDetectionRange(500) -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö")
    print("  _G.AISystem.ForceChaseNearestPlayer() -- ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÑ‡∏•‡πà player ‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
end



if CONFIG.EnablePhase3 then
    print("\n[AI System] üöÄ Phase 3 Commands:")
    print("  _G.AISystem.ForceDashNearestPlayer() -- ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏û‡∏∏‡πà‡∏á‡πÉ‡∏™‡πà player ‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
    print("  _G.AISystem.SetDashChance(0.5)      -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏û‡∏∏‡πà‡∏á (0-1)")
    print("  _G.AISystem.SetKnockbackForce(2000) -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏£‡∏á‡∏Å‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô")
    print("  _G.AISystem.SetDashRange(50, 120)   -- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏û‡∏∏‡πà‡∏á (min, max)")
    print("  _G.AISystem.ShowDashStats()         -- ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏∏‡πà‡∏á")
end



print("")

-- ==========================================
-- ‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π Player (Phase 2)
-- ==========================================
if CONFIG.EnablePhase2 then
    game.Players.PlayerAdded:Connect(function(player)
        print("[AI System] üë§ Player joined:", player.Name, "- AIs will detect them!")
    end)

    game.Players.PlayerRemoving:Connect(function(player)
        print("[AI System] üëã Player left:", player.Name)
    end)
end

-- ==========================================
-- ‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π Enemy ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
-- ==========================================
enemiesFolder.ChildAdded:Connect(function(child)
    if child:IsA("Model") and child:FindFirstChild("Humanoid") then
        wait(0.5) -- ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        
        print("[AI System] üÜï New enemy detected:", child.Name)
        
        local success, controller = pcall(function()
            local enemyData = repo:CreateSimpleEnemy(child)
            local newController = SimpleWalkController.new(child)
            
            if CONFIG.AutoStart then
                if newController.Start then
                    newController:Start()
                elseif newController.StartWalking then
                    newController:StartWalking()
                end
            end
            
            return newController
        end)
        
        if success then
            table.insert(activeControllers, controller)

             local features = {}
            if CONFIG.EnablePhase1 then table.insert(features, "Walk") end
            if CONFIG.EnablePhase2 then table.insert(features, "Chase") end
            if CONFIG.EnablePhase3 then table.insert(features, "Dash") end

            print("[AI System] ‚úÖ", child.Name, "- AI Started (" .. table.concat(features, " + ") .. ")")

            --print("[AI System] ‚úÖ", child.Name, "- AI Started")
        else
            warn("[AI System] ‚ùå", child.Name, "- Failed to initialize")
        end
    end
end)

print("[AI System] üëÄ Watching for new enemies...")