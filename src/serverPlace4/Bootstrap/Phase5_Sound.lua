-- ==========================================
-- ServerLocal/Bootstrap/Phase5_Sound.lua (ModuleScript)
-- ==========================================
-- ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á AI
-- Phase 5: Sound Detection & Enemy Response System
-- ==========================================

local Phase5 = {}

-- ==========================================
-- Initialize: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏∞‡∏ö‡∏ö Sound Detection
-- ==========================================
function Phase5.Initialize(repo, config)
    print("===========================================")
    print("[AI Phase 5] üîä Initializing Sound Detection System...")
    print("[AI Phase 5] ‚Ä¢ Sound Radius:", config.SoundRadius or "N/A", "studs")
    print("[AI Phase 5] ‚Ä¢ Sound Duration:", config.SoundDuration or "N/A", "seconds")
    print("[AI Phase 5] ‚Ä¢ Hearing Range:", config.SoundHearingRange or "N/A", "studs")
    print("[AI Phase 5] ‚Ä¢ Alert Duration:", config.SoundAlertDuration or "N/A", "seconds")
    print("[AI Phase 5] ‚Ä¢ Investigation Timeout:", config.SoundInvestigationTimeout or "N/A", "seconds")
    print("[AI Phase 5] ‚Ä¢ Reach Threshold:", config.SoundReachThreshold or "N/A", "studs")
    print("[AI Phase 5] ‚Ä¢ Check Interval:", config.SoundCheckInterval or "N/A", "seconds")
    print("[AI Phase 5] ‚Ä¢ Visual Effect:", config.SoundVisualEffect and "‚úÖ ON" or "‚ùå OFF")
    print("[AI Phase 5] ‚Ä¢ Require Line of Sight:", config.SoundRequireLineOfSight and "‚úÖ ON" or "‚ùå OFF")
    print("[AI Phase 5] ‚úÖ Sound Detection System Ready")
    print("===========================================")
end

-- ==========================================
-- Start: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Sound Detection
-- ==========================================
function Phase5.Start(activeControllers)
    print("[AI Phase 5] üéØ Sound Detection System Active")
    print("[AI Phase 5] üí° Sound investigation loops are running in controllers")
    print("[AI Phase 5] üí° AIs will investigate sounds when detected")
    
    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ controllers ‡∏°‡∏µ Sound Detection System ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    local hasSound = 0
    local hasSoundData = 0
    local hasSoundService = 0
    
    for _, controller in ipairs(activeControllers) do
        if controller.SoundDetectionService then
            hasSound = hasSound + 1
        end
        if controller.EnemyData and controller.EnemyData.SoundData then
            hasSoundData = hasSoundData + 1
        end
        if controller.OnHearSound then
            hasSoundService = hasSoundService + 1
        end
    end
    
    print("[AI Phase 5] ‚úÖ", hasSound, "/", #activeControllers, "enemies have sound detection service")
    print("[AI Phase 5] ‚úÖ", hasSoundData, "/", #activeControllers, "enemies have sound data")
    print("[AI Phase 5] ‚úÖ", hasSoundService, "/", #activeControllers, "enemies can hear sounds")
    
    return hasSound
end

-- ==========================================
-- StartPlayerSoundEmitters: ‡πÄ‡∏£‡∏¥‡πà‡∏° Sound Emitter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Players
-- ==========================================
function Phase5.StartPlayerSoundEmitters(activeControllers)
    local Players = game:GetService("Players")
    local PlayerSoundEmitter = require(game.ServerScriptService.ServerLocal.Presentation.Controllers.PlayerSoundEmitter)
    
    local emitters = {}
    
    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á Emitter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Players ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Character then
            local emitter = PlayerSoundEmitter.new(player, activeControllers)
            emitter:StartMovementDetection()
            emitters[player] = emitter
            print("[AI Phase 5] ‚úÖ Started sound emitter for:", player.Name)
        end
    end
    
    -- ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Players ‡πÉ‡∏´‡∏°‡πà
    Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function(character)
            task.wait(1) -- ‡∏£‡∏≠‡πÉ‡∏´‡πâ character ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
            local emitter = PlayerSoundEmitter.new(player, activeControllers)
            emitter:StartMovementDetection()
            emitters[player] = emitter
            print("[AI Phase 5] ‚úÖ Started sound emitter for new player:", player.Name)
        end)
    end)
    
    -- ‡∏•‡∏ö Emitter ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Player ‡∏≠‡∏≠‡∏Å
    Players.PlayerRemoving:Connect(function(player)
        if emitters[player] then
            emitters[player]:Stop()
            emitters[player] = nil
            print("[AI Phase 5] üóëÔ∏è Removed sound emitter for:", player.Name)
        end
    end)
    
    print("[AI Phase 5] üîä Player sound emitters initialized:", #emitters)
    
    return emitters
end

-- ==========================================
-- TestSoundEmission: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
-- ==========================================
function Phase5.TestSoundEmission(activeControllers, config)
    local Players = game:GetService("Players")
    local SoundHelper = require(game.ServerScriptService.ServerLocal.Infrastructure.utility.SoundHelper)
    
    -- ‡∏´‡∏≤ Player ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å
    local testPlayer = Players:GetPlayers()[1]
    if not testPlayer or not testPlayer.Character then
        warn("[AI Phase 5] ‚ö†Ô∏è No player found for testing")
        return 0
    end
    
    local playerRoot = testPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not playerRoot then
        warn("[AI Phase 5] ‚ö†Ô∏è Player has no HumanoidRootPart")
        return 0
    end
    
    print("===========================================")
    print("[AI Phase 5] üß™ Testing Sound Emission...")
    print("[AI Phase 5] üéØ Test Player:", testPlayer.Name)
    print("[AI Phase 5] üìç Position:", playerRoot.Position)
    print("[AI Phase 5] üîä Emitting test sound...")
    
    -- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    local detectedEnemies = SoundHelper.EmitSoundWave(
        playerRoot,
        config.SoundRadius,
        config.SoundDuration,
        function(enemyInfo, soundOrigin, playerCharacter)
            -- ‡∏´‡∏≤ Controller ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            for _, controller in ipairs(activeControllers) do
                if controller.Model == enemyInfo.Model then
                    controller:OnHearSound(soundOrigin, playerCharacter)
                    print("[AI Phase 5] ‚úÖ", controller.Model.Name, "heard the test sound!")
                    break
                end
            end
        end
    )
    
    print("[AI Phase 5] üìä Test Results:")
    print("  ‚Ä¢ Enemies detected:", #detectedEnemies)
    
    for i, enemyInfo in ipairs(detectedEnemies) do
        print("  ‚Ä¢ Enemy", i, ":", enemyInfo.Model.Name, "- Distance:", math.floor(enemyInfo.Distance), "studs")
    end
    
    print("===========================================")
    
    return #detectedEnemies
end

-- ==========================================
-- ForceInvestigateNearestSound: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
-- ==========================================
function Phase5.ForceInvestigateNearestSound(activeControllers)
    local Players = game:GetService("Players")
    
    if #Players:GetPlayers() == 0 then
        warn("[AI Phase 5] ‚ö†Ô∏è No players in game")
        return 0
    end
    
    print("[AI Phase 5] üéØ Forcing enemies to investigate nearest player sound...")
    local investigateCount = 0
    
    for _, controller in ipairs(activeControllers) do
        if not controller.RootPart or not controller.OnHearSound then continue end
        
        -- ‡∏´‡∏≤ player ‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        local nearestPlayer = nil
        local shortestDistance = math.huge
        
        for _, player in ipairs(Players:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local hrp = player.Character.HumanoidRootPart
                local distance = (controller.RootPart.Position - hrp.Position).Magnitude
                
                if distance < shortestDistance and distance <= controller.SoundHearingRange then
                    nearestPlayer = player
                    shortestDistance = distance
                end
            end
        end
        
        -- ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        if nearestPlayer then
            local success = pcall(function()
                local soundPos = nearestPlayer.Character.HumanoidRootPart.Position
                controller:OnHearSound(soundPos, nearestPlayer.Character)
                investigateCount = investigateCount + 1
            end)
            
            if success and controller.Model then
                print("[AI Phase 5] ‚úÖ", controller.Model.Name, "- Investigating", nearestPlayer.Name, "(Distance:", math.floor(shortestDistance), "studs)")
            end
        end
    end
    
    print("[AI Phase 5] üéØ Forced", investigateCount, "/", #activeControllers, "enemies to investigate")
    return investigateCount
end

-- ==========================================
-- SetHearingRange: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô
-- ==========================================
function Phase5.SetHearingRange(activeControllers, newRange)
    if newRange <= 0 then
        warn("[AI Phase 5] ‚ö†Ô∏è Hearing range must be positive")
        return 0
    end
    
    local count = 0
    for _, controller in ipairs(activeControllers) do
        if controller.SoundDetectionService then
            controller.SoundDetectionService:SetHearingRange(newRange)
            controller.SoundHearingRange = newRange
            count = count + 1
        end
    end
    
    print("[AI Phase 5] üîä Hearing range changed to:", newRange, "studs for", count, "enemies")
    return count
end

-- ==========================================
-- SetAlertDuration: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ Alert
-- ==========================================
function Phase5.SetAlertDuration(activeControllers, newDuration)
    if newDuration <= 0 then
        warn("[AI Phase 5] ‚ö†Ô∏è Alert duration must be positive")
        return 0
    end
    
    local count = 0
    for _, controller in ipairs(activeControllers) do
        if controller.SoundDetectionService then
            controller.SoundDetectionService:SetAlertDuration(newDuration)
            controller.SoundAlertDuration = newDuration
            count = count + 1
        end
    end
    
    print("[AI Phase 5] ‚è±Ô∏è Alert duration changed to:", newDuration, "seconds for", count, "enemies")
    return count
end

-- ==========================================
-- SetSoundRadius: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á
-- ==========================================
function Phase5.SetSoundRadius(config, newRadius)
    if newRadius <= 0 then
        warn("[AI Phase 5] ‚ö†Ô∏è Sound radius must be positive")
        return false
    end
    
    config.SoundRadius = newRadius
    print("[AI Phase 5] üîä Sound radius changed to:", newRadius, "studs")
    return true
end

-- ==========================================
-- ToggleVisualEffect: ‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ß‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á
-- ==========================================
function Phase5.ToggleVisualEffect(config, enabled)
    --config.SoundVisualEffect = enabled
    config.SoundVisualEffect = enabled
    print("[AI Phase 5] ‚ú® Visual effect:", enabled and "‚úÖ ON" or "‚ùå OFF")
    return enabled
end

-- ==========================================
-- StopAllInvestigations: ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
-- ==========================================
function Phase5.StopAllInvestigations(activeControllers)
    local count = 0
    print("[AI Phase 5] üõë Stopping all sound investigations...")
    
    for _, controller in ipairs(activeControllers) do
        local success = pcall(function()
            if controller.IsInvestigatingSound and controller.StopSoundInvestigation then
                controller:StopSoundInvestigation()
                count = count + 1
            end
        end)
        
        if not success and controller.Model then
            warn("[AI Phase 5] ‚ö†Ô∏è Failed to stop investigation for:", controller.Model.Name)
        end
    end
    
    print("[AI Phase 5] üõë Stopped", count, "investigations")
    return count
end

-- ==========================================
-- GetStatus: ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö Sound
-- ==========================================
function Phase5.GetStatus(activeControllers, config)
    local investigating = 0
    local alerted = 0
    local hasHeardSound = 0
    local silent = 0
    
    for _, controller in ipairs(activeControllers) do
        if controller.IsInvestigatingSound then
            investigating = investigating + 1
        end
        
        if controller.SoundDetectionService then
            if controller.SoundDetectionService:IsAlerted() then
                alerted = alerted + 1
            end
            if controller.SoundDetectionService:HasHeardSound() then
                hasHeardSound = hasHeardSound + 1
            end
            if controller.SoundDetectionService:IsSilent() then
                silent = silent + 1
            end
        end
    end
    
    return {
        Investigating = investigating,
        Alerted = alerted,
        HeardSound = hasHeardSound,
        Silent = silent,
        Total = #activeControllers,
        SoundRadius = config.SoundRadius,
        HearingRange = config.SoundHearingRange,
        AlertDuration = config.SoundAlertDuration,
        VisualEffect = config.SoundVisualEffect
    }
end

-- ==========================================
-- ShowStats: ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ Sound
-- ==========================================
function Phase5.ShowStats(activeControllers, config)
    local status = Phase5.GetStatus(activeControllers, config)
    
    print("===========================================")
    print("[AI Phase 5] üîä Sound Detection System Statistics:")
    print("===========================================")
    print("üìä Behavior Status:")
    print("  ‚Ä¢ Currently Investigating:", status.Investigating)
    print("  ‚Ä¢ Currently Alerted:", status.Alerted)
    print("  ‚Ä¢ Has Heard Sound:", status.HeardSound)
    print("  ‚Ä¢ Silent (Normal):", status.Silent)
    print("  ‚Ä¢ Total Enemies:", status.Total)
    print("")
    print("‚öôÔ∏è Current Configuration:")
    print("  ‚Ä¢ Sound Radius:", status.SoundRadius, "studs")
    print("  ‚Ä¢ Hearing Range:", status.HearingRange, "studs")
    print("  ‚Ä¢ Alert Duration:", status.AlertDuration, "seconds")
    print("  ‚Ä¢ Visual Effect:", status.VisualEffect and "‚úÖ ON" or "‚ùå OFF")
    print("")
    
    -- ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Enemies ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    if status.Investigating > 0 then
        print("üîç Currently Investigating:")
        for _, controller in ipairs(activeControllers) do
            if controller.IsInvestigatingSound then
                local enemyName = controller.Model and controller.Model.Name or "Unknown"
                local target = controller.SoundInvestigationTarget
                print("  ‚Ä¢", enemyName, "- Target:", target)
            end
        end
    end
    
    print("===========================================")
end

-- ==========================================
-- ListInvestigatingEnemies: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Enemy ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
-- ==========================================
function Phase5.ListInvestigatingEnemies(activeControllers)
    print("===========================================")
    print("[AI Phase 5] üîç Investigating Enemies List:")
    print("===========================================")
    
    local investigatingList = {}
    
    for _, controller in ipairs(activeControllers) do
        if controller.IsInvestigatingSound then
            local enemyName = controller.Model and controller.Model.Name or "Unknown"
            local soundSource = controller.SoundDetectionService:GetSoundSource()
            local soundSourceName = soundSource and soundSource.Name or "Unknown"
            local target = controller.SoundInvestigationTarget
            local distance = controller.RootPart and target and 
                           (controller.RootPart.Position - target).Magnitude or "N/A"
            
            table.insert(investigatingList, {
                Enemy = enemyName,
                Source = soundSourceName,
                Distance = distance
            })
        end
    end
    
    if #investigatingList == 0 then
        print("üìä No enemies are currently investigating sounds")
    else
        for i, info in ipairs(investigatingList) do
            print("  ‚Ä¢", info.Enemy, "- Investigating sound from", info.Source)
            if type(info.Distance) == "number" then
                print("    Distance to target:", math.floor(info.Distance), "studs")
            end
        end
        print("")
        print("üìä Total investigating:", #investigatingList)
    end
    
    print("===========================================")
end

-- ==========================================
-- ShowHelp: ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Phase 5
-- ==========================================
function Phase5.ShowHelp()
    print("===========================================")
    print("[AI Phase 5] üîä Sound Detection System Help")
    print("===========================================")
    print("\nüìñ Available Commands:")
    print("\nüß™ Testing:")
    print("  _G.AISystem.TestSoundEmission()")
    print("  _G.AISystem.ForceInvestigateNearestSound()")
    print("\n‚öôÔ∏è Configuration:")
    print("  _G.AISystem.SetHearingRange(80)")
    print("  _G.AISystem.SetAlertDuration(3.0)")
    print("  _G.AISystem.SetSoundRadius(70)")
    print("  _G.AISystem.ToggleSoundVisual(true)")
    print("\nüõë Control:")
    print("  _G.AISystem.StopAllInvestigations()")
    print("  _G.AISystem.StartPlayerSoundEmitters()")
    print("\nüìä Information:")
    print("  _G.AISystem.ShowSoundStats()")
    print("  _G.AISystem.ListInvestigatingEnemies()")
    print("\nüí° Tips:")
    print("  ‚Ä¢ Higher hearing range = enemies detect sounds from farther away")
    print("  ‚Ä¢ Longer alert duration = enemies stay alert longer")
    print("  ‚Ä¢ Visual effects help see sound waves")
    print("  ‚Ä¢ Sound priority: Dash > Chase > Sound > Walk")
    print("===========================================")
end

return Phase5