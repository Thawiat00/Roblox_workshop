-- ==========================================
-- Presentation/Controllers/SimpleWalkController.lua (ModuleScript)
-- ==========================================
-- ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Enemy ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô Roblox (‡πÉ‡∏ä‡πâ Roblox API)
-- ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞: ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å Layer ‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß
-- ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Business Logic ‡∏Å‡∏±‡∏ö Roblox Instances
-- ==========================================


-- ==========================================
-- Presentation/Controllers/SimpleWalkController.lua (ModuleScript)
-- ==========================================
-- Phase 3: ‡πÄ‡∏û‡∏¥‡πà‡∏° Spear Dash & Knockback System
-- ==========================================


local AIState = require(game.ServerScriptService.ServerLocal.Core.Enums.AIState)
local SimpleEnemyRepository = require(game.ServerScriptService.ServerLocal.Infrastructure.Repositories.SimpleEnemyRepository)
local SimpleWalkService = require(game.ServerScriptService.ServerLocal.Application.Services.SimpleWalkService)
local SimpleAIConfig = require(game.ServerScriptService.ServerLocal.Infrastructure.Data.SimpleAIConfig)


-- ‚ú® Phase 2 Services
local DetectionService = require(game.ServerScriptService.ServerLocal.Application.Services.DetectionService)
local ChaseService = require(game.ServerScriptService.ServerLocal.Application.Services.ChaseService)
local PathfindingLogicService = require(game.ServerScriptService.ServerLocal.Application.Services.PathfindingLogicService)

-- ‚ú® Phase 3 Service
local SpearDashService = require(game.ServerScriptService.ServerLocal.Application.Services.SpearDashService)





-- ‚ú® Phase 2 Helpers
local PathfindingHelper = require(game.ServerScriptService.ServerLocal.Infrastructure.utility.PathfindingHelper)
local DetectionHelper = require(game.ServerScriptService.ServerLocal.Infrastructure.utility.DetectionHelper)


-- ‚ú® Phase 3 Helper
local DashHelper = require(game.ServerScriptService.ServerLocal.Infrastructure.utility.DashHelper)



-- ‚ú® Phase 4 Helper
local ImpactHelper = require(game.ServerScriptService.ServerLocal.Infrastructure.utility.ImpactHelper)




-- Roblox Services
local PathfindingService = game:GetService("PathfindingService")






local SimpleWalkController = {}
SimpleWalkController.__index = SimpleWalkController

-- ==========================================
-- Constructor: ‡∏™‡∏£‡πâ‡∏≤‡∏á Controller ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Enemy 1 ‡∏ï‡∏±‡∏ß
-- ==========================================
function SimpleWalkController.new(model)
	local self = setmetatable({}, SimpleWalkController)
	
	-- ==========================================
	-- ROBLOX INSTANCES (Layer ‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ)
	-- ==========================================
	self.Model = model
	self.Humanoid = model:WaitForChild("Humanoid")
	self.RootPart = model:WaitForChild("HumanoidRootPart")
	
	-- ==========================================
	-- ‡∏™‡∏£‡πâ‡∏≤‡∏á Repository ‡πÅ‡∏•‡∏∞ Entity
	-- ==========================================
	local repository = SimpleEnemyRepository.new()
	self.EnemyData = repository:CreateSimpleEnemy(model)
	

    -- ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° RootPart ‡πÉ‡∏´‡πâ EnemyData (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Phase 4)
    self.EnemyData.RootPart = self.RootPart



	-- ==========================================
	-- ‡∏™‡∏£‡πâ‡∏≤‡∏á Service (Business Logic)
	-- ==========================================
	self.WalkService = SimpleWalkService.new(self.EnemyData)
	
	self.DetectionService = DetectionService.new(self.EnemyData) -- ‚ú® ‡πÉ‡∏´‡∏°‡πà
    self.ChaseService = ChaseService.new(self.EnemyData)         -- ‚ú® ‡πÉ‡∏´‡∏°‡πà
    self.PathfindingLogic = PathfindingLogicService.new()        -- ‚ú® ‡πÉ‡∏´‡∏°‡πà

    -- ‚ú® Phase 3: Spear Dash Service
    self.DashService = SpearDashService.new(self.EnemyData)




	-- ==========================================
	-- ‡πÇ‡∏´‡∏•‡∏î Config
	-- ==========================================
	self.WalkDuration = SimpleAIConfig.WalkDuration      -- ‡πÄ‡∏î‡∏¥‡∏ô‡∏ô‡∏≤‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
	self.IdleDuration = SimpleAIConfig.IdleDuration      -- ‡∏´‡∏¢‡∏∏‡∏î 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
	self.WanderRadius = SimpleAIConfig.WanderRadius      -- ‡∏£‡∏±‡∏®‡∏°‡∏µ 30 Studs
	self.MinWanderDistance = SimpleAIConfig.MinWanderDistance or 10
	
	self.DetectionRange = SimpleAIConfig.DetectionRange          -- ‚ú® ‡πÉ‡∏´‡∏°‡πà

        -- ‚ú® ‡πÉ‡∏´‡∏°‡πà: config ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏•‡πà
    self.ChaseStopRange = SimpleAIConfig.ChaseStopRange
    self.ChaseStopDelay = SimpleAIConfig.ChaseStopDelay


    -- ‚ú® Phase 3: Dash Config
    self.DashMinDistance = SimpleAIConfig.DashMinDistance
    self.DashMaxDistance = SimpleAIConfig.DashMaxDistance
    self.DashCheckInterval = SimpleAIConfig.DashCheckInterval
    self.RecoverDuration = SimpleAIConfig.RecoverDuration


    -- ‚ú® Phase 4 Config
    self.ImpactForceMagnitude = SimpleAIConfig.ImpactForceMagnitude
    self.ImpactDuration = SimpleAIConfig.ImpactDuration
    self.ImpactDamage = SimpleAIConfig.ImpactDamage
    self.ImpactVisualEffect = SimpleAIConfig.ImpactVisualEffect


    -- State tracking
    self.OutOfRangeStartTime = nil
    self.OverlapParams = DetectionHelper.CreateOverlapParams(model)



	-- ==========================================
	-- ‡∏™‡∏£‡πâ‡∏≤‡∏á Pathfinding (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á)
	-- ==========================================
	self.Path = PathfindingService:CreatePath({
		AgentRadius = SimpleAIConfig.AgentRadius,
		AgentHeight = SimpleAIConfig.AgentHeight,
		AgentCanJump = SimpleAIConfig.AgentCanJump
	})
	

    -- ‚ú® Phase 3: Setup Touched Connection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Knockback
   --self:SetupKnockbackDetection()
    
    -- ‚ú® Phase 4: Setup Impact Detection
    self:SetupImpactDetection()



	-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö
	self:Initialize()
	
	return self
end

-- ==========================================
-- ‚ú® Phase 4: Setup Impact Detection
-- ==========================================
function SimpleWalkController:SetupImpactDetection()
    -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Touched event ‡∏Å‡∏±‡∏ö RootPart
    self.TouchConnection = self.RootPart.Touched:Connect(function(hit)
        -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á Dash ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not self.DashService:IsDashing() then
            return
        end
        
        -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Player ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        local isPlayer, player = ImpactHelper.IsPlayerCharacter(hit)
        if not isPlayer then
            return
        end
        
        -- ‡∏î‡∏∂‡∏á HumanoidRootPart ‡∏Ç‡∏≠‡∏á Player
        local playerRoot = ImpactHelper.GetPlayerRootPart(hit.Parent)
        if not playerRoot then
            return
        end
        
        -- ‚ú® ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OnDashHit ‡∏û‡∏£‡πâ‡∏≠‡∏° Impact Callback
        self.DashService:OnDashHit(hit.Parent, function(target, player, playerRoot)
            return self:HandlePlayerImpact(target, player, playerRoot)
        end)
    end)
    
    print("[Controller] ‚úÖ Impact detection setup complete")
end


-- ==========================================
-- ‚ú® Phase 4: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å Player
-- ==========================================
function SimpleWalkController:HandlePlayerImpact(target, player, playerRoot)
    if not playerRoot or not self.RootPart then
        warn("[Controller] Cannot handle impact: missing root parts")
        return false
    end
    
    -- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏£‡∏á‡∏Å‡∏£‡∏∞‡πÅ‡∏ó‡∏Å
    local forceVector = ImpactHelper.CalculateImpactForce(
        self.RootPart,
        playerRoot,
        self.ImpactForceMagnitude
    )
    
    if not forceVector then
        warn("[Controller] Failed to calculate impact force")
        return false
    end
    
    -- ‚ú® Apply VectorForce ‡πÉ‡∏´‡πâ Player
    local success = ImpactHelper.ApplyImpactForce(
        playerRoot,
        forceVector,
        self.ImpactDuration,
        SimpleAIConfig.ImpactGravityCompensation
    )
    
    if success then
        print("[Controller] üí• Impact applied to:", player.Name)
        
        -- ‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á Visual Effect (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ)
        if self.ImpactVisualEffect then
            ImpactHelper.CreateImpactEffect(playerRoot.Position)
        end
        
        return true
    else
        warn("[Controller] Failed to apply impact force")
        return false
    end
end



-- ==========================================
-- ‚ú® Phase 3: Setup Knockback Detection
-- ==========================================
function SimpleWalkController:SetupKnockbackDetection()
    -- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° Touched event ‡∏Å‡∏±‡∏ö RootPart
    self.TouchConnection = self.RootPart.Touched:Connect(function(hit)
        -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á Dash ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not self.DashService:IsDashing() then
            return
        end
        
        -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Player ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not DashHelper.IsPlayerPart(hit) then
            return
        end
        
        -- ‡∏î‡∏∂‡∏á HumanoidRootPart ‡∏Ç‡∏≠‡∏á Player
        local playerRootPart = DashHelper.GetPlayerRootPart(hit)
        if not playerRootPart then
            return
        end
        
        -- Apply Knockback
        local dashDirection = self.DashService:GetDashDirection()
        if dashDirection then
            local success = DashHelper.ApplyKnockback(playerRootPart, dashDirection)
            if success then
                print("[Controller] üí• Knockback applied to:", hit.Parent.Name)
            end
        end
    end)
    
    print("[Controller] ‚úÖ Knockback detection setup complete")
end



-- ==========================================
-- Initialize: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° Loop
-- ==========================================
function SimpleWalkController:Initialize()
	-- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0 (‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô)
	self.Humanoid.WalkSpeed = 0
	self.IsActive = true  -- ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ Loop ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    self.IsChasing = false  -- ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô false


	-- ‡πÄ‡∏£‡∏¥‡πà‡∏° Loop ‡∏´‡∏•‡∏±‡∏Å (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Async ‡πÑ‡∏°‡πà Block)
	--task.spawn(function()
	--	self:RandomWalkLoop()
	--end)


	  -- ‡πÄ‡∏£‡∏¥‡πà‡∏° Main Loop (‡πÄ‡∏î‡∏¥‡∏ô/‡∏´‡∏¢‡∏∏‡∏î)
    task.spawn(function()
        self:MainBehaviorLoop()
    end)


-- üîπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö player (Phase 2)
    task.spawn(function()
        self:DetectionLoop()
    end)

     -- ‚ú® Phase 3: Dash Check Loop
    task.spawn(function()
        self:DashCheckLoop()
    end)



	print("[Controller] Initialized:", self.Model.Name)
end



-- ==========================================
-- ‚ú® Phase 3: DASH CHECK LOOP
-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏û‡∏∏‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ Chase ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
-- ==========================================
function SimpleWalkController:DashCheckLoop()
    while self.IsActive and self.Humanoid.Health > 0 do
        
        if self.IsChasing and self.CurrentTarget then
            print("[Debug] üü¢ DashCheckLoop active | Target:", self.CurrentTarget.Name)

            -- STEP 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cooldown
            local canDash = self.DashService:CanDash()
            print("[Debug] Step 1 | CanDash:", canDash)
            if not canDash then
                task.wait(self.DashCheckInterval)
                continue
            end

            -- STEP 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ target ‡∏°‡∏µ Position ‡πÑ‡∏´‡∏°
            if not (self.RootPart and self.CurrentTarget and self.CurrentTarget.Position) then
                warn("[Debug] Step 2 | Missing position data")
                task.wait(self.DashCheckInterval)
                continue
            end

            -- STEP 3: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞
            local distance = DashHelper.GetDistance(
                self.RootPart.Position,
                self.CurrentTarget.Position
            )
            print("[Debug] Step 3 | Distance to target:", distance)

            -- STEP 4: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            local inRange = DashHelper.IsInDashRange(distance)
            if not inRange then
                task.wait(self.DashCheckInterval)
                continue
            end
          --  local inRange = DashHelper.IsInDashRange(distance)
          --  print("[Debug] Step 4 | InDashRange:", inRange, 
          --      "(Min:", self.DashMinDistance, 
          --      "Max:", self.DashMaxDistance, ")")
          --  if not inRange then
           --     task.wait(self.DashCheckInterval)
           --     continue
           -- end

            -- STEP 5: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ShouldDash ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏´‡∏°
            local shouldDash = DashHelper.ShouldDash()
            print("[Debug] Step 5 | ShouldDash:", shouldDash)
            if not shouldDash then
                task.wait(self.DashCheckInterval)
                continue
            end

            -- STEP 6: ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏∏‡πà‡∏á
            print("[Debug] ‚úÖ All dash conditions met | Distance:", distance)
            self:StartDashing()
        end

        task.wait(self.DashCheckInterval)
    end
end



-- ==========================================
-- ‚ú® Phase 3: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏∏‡πà‡∏á
-- ==========================================
function SimpleWalkController:StartDashing()
    if not self.CurrentTarget then
        warn("[Controller] Cannot dash: no target")
        return
    end
    
     -- üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ target ‡πÄ‡∏õ‡πá‡∏ô Player ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    local player = game.Players:GetPlayerFromCharacter(self.CurrentTarget.Parent)
    if not player then
        warn("[Controller] Cannot dash: target is not a player")
        return
    end

       -- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏∏‡πà‡∏á
    local dashDirection = DashHelper.CalculateDashDirection(
        self.RootPart.Position,
        self.CurrentTarget.Position
    )


  --      -- ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏û‡∏∏‡πà‡∏á
  --  local dashDuration = DashHelper.GetRandomDashDuration()


   

    -- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏∏‡πà‡∏á
  --  local dashDirection = DashHelper.CalculateDashDirection(
  --      self.RootPart.Position,
  --      self.CurrentTarget.Position
  --  )
    
    -- ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏û‡∏∏‡πà‡∏á
    local dashDuration = DashHelper.GetRandomDashDuration()
    
    -- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service
    local success = self.DashService:StartDash(
        self.CurrentTarget,
        dashDirection,
        dashDuration
    )
    
    if success then
        -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß Humanoid
        self.Humanoid.WalkSpeed = self.EnemyData.SpearSpeed
        
        print("[Controller] üöÄ Started dashing at speed:", self.EnemyData.SpearSpeed)
        
        -- ‡πÄ‡∏£‡∏¥‡πà‡∏° Dash Loop
        task.spawn(function()
            self:DashLoop()
        end)
    end
end


-- ==========================================
-- ‚ú® Phase 3: DASH LOOP - ‡∏û‡∏∏‡πà‡∏á‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á target
-- ==========================================
function SimpleWalkController:DashLoop()

 --   local hitPlayers = {} -- ‡πÄ‡∏Å‡πá‡∏ö Player ‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ã‡πâ‡∏≥

    while self.IsActive and self.Humanoid.Health > 0 and self.DashService:IsDashing() do
        
         -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ target ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not self.CurrentTarget or not self.CurrentTarget.Parent then
            print("[Controller] ‚ùå Target lost during dash")
            self.DashService:StopDash()
            break
        end
        
        -- üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ: ‡∏ï‡∏£‡∏ß‡∏à collision ‡∏Å‡∏±‡∏ö player
        --self.DashService:OnDashHit(self.CurrentTarget.Parent)
        -- üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Player ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        local player = game.Players:GetPlayerFromCharacter(self.CurrentTarget.Parent)
        if not player then
            print("[Controller] ‚ùå Target is not a player, stopping dash")
            self.DashService:StopDash()
            break
        end


        -- ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á target (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ pathfinding)
        self.Humanoid:MoveTo(self.CurrentTarget.Position)


            -- üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Å‡∏±‡∏ö Player (‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏ã‡πâ‡∏≥)
     --   if not hitPlayers[player] then
    --        self.DashService:OnDashHit(self.CurrentTarget.Parent)
     --       hitPlayers[player] = true -- mark ‡∏ß‡πà‡∏≤‡πÇ‡∏î‡∏ô‡πÅ‡∏•‡πâ‡∏ß
     --       print("[Controller] üí• Hit player:", player.Name)
     --   end


        -- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏∏‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if self.DashService:IsDashComplete() then
            print("[Controller] ‚è±Ô∏è Dash completed!")
            self:StartRecovering()
            break
        end
        
        task.wait(0.05) -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
    end
end


-- ==========================================
-- ‚ú® Phase 3: ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Recover
-- ==========================================
function SimpleWalkController:StartRecovering()
    self.DashService:StartRecover()
    self.Humanoid.WalkSpeed = 0
    
    print("[Controller] üòÆ‚Äçüí® Recovering...")
    
    -- ‡∏£‡∏≠‡∏à‡∏ô‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ Recover
    task.wait(self.RecoverDuration)
    
    -- ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Chase
    self.DashService:ResumeChase()
    self.Humanoid.WalkSpeed = self.EnemyData.RunSpeed
    
    print("[Controller] ‚úÖ Recovery complete, resuming chase")
end





-- ==========================================
-- ‚ú® DETECTION LOOP: ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö player ‡∏ó‡∏∏‡∏Å 0.1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
-- ==========================================
function SimpleWalkController:DetectionLoop()
    while self.IsActive and self.Humanoid.Health > 0 do
        
        -- ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏•‡πà‡∏≠‡∏¢‡∏π‡πà - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ target ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if self.IsChasing and self.CurrentTarget then
            
            -- ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ target ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if not DetectionHelper.IsTargetValid(self.CurrentTarget) then
                print("[Controller] Target invalid, stopping chase")
                self:StopChasing()
                task.wait(SimpleAIConfig.DetectionCheckInterval)
                continue
            end
            
            -- ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á
            local isOutOfRange = DetectionHelper.IsTargetOutOfRange(
                self.RootPart.Position,
                self.CurrentTarget,
                self.ChaseStopRange
            )
            
            if isOutOfRange then
                -- ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏´‡∏•‡∏∏‡∏î‡∏£‡∏∞‡∏¢‡∏∞ - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
                if not self.OutOfRangeStartTime then
                    self.OutOfRangeStartTime = tick()
                    print("[Controller] Target out of range, waiting before stop...")
                else
                    -- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏´‡∏•‡∏∏‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏ô‡∏≤‡∏ô‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                    local outOfRangeTime = tick() - self.OutOfRangeStartTime
                    if outOfRangeTime >= self.ChaseStopDelay then
                        print("[Controller] Target out of range too long, stopping chase")
                        self:StopChasing()
                    end
                end
            else
                -- ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
                self.OutOfRangeStartTime = nil
            end
            
        -- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏•‡πà - ‡∏°‡∏≠‡∏á‡∏´‡∏≤ player ‡πÉ‡∏´‡∏°‡πà
        else
            local players = DetectionHelper.FindPlayersInRange(
                self.RootPart.Position,
                self.DetectionRange,
                self.OverlapParams
            )
            
            if #players > 0 then
                local nearestPlayer = DetectionHelper.FindNearestValidPlayer(
                    self.RootPart.Position,
                    players,
                    PathfindingHelper
                )
                
                if nearestPlayer then
                    self:StartChasing(nearestPlayer)
                end
            end
        end
        
        task.wait(SimpleAIConfig.DetectionCheckInterval)
    end
end


-- ==========================================
-- ‚ú® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏•‡πà player
-- ==========================================
function SimpleWalkController:StartChasing(targetPart)
    if self.IsChasing then
        -- ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏•‡πà‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏Ñ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô target
        self.CurrentTarget = targetPart
        return
    end
    
    self.IsChasing = true
    self.CurrentTarget = targetPart
    self.OutOfRangeStartTime = nil  -- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
    
    self.DetectionService:StartDetection(targetPart)
    self.ChaseService:StartChase(targetPart)
    
    self.Humanoid.WalkSpeed = self.EnemyData.RunSpeed
    
    print("[Controller] Started chasing:", targetPart.Parent.Name)
    
    task.spawn(function()
        self:ChaseLoop(targetPart)
    end)
end



-- ==========================================
-- ‚ú® CHASE LOOP: ‡πÑ‡∏•‡πà player ‡∏ï‡∏≤‡∏° waypoints
-- CHASE LOOP (Phase 2 - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ Dash)

-- ==========================================
function SimpleWalkController:ChaseLoop(targetPart)
    while self.IsChasing and self.Humanoid.Health > 0 do
        
        -- ‚ú® ‡∏´‡∏¢‡∏∏‡∏î Chase ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á Dash ‡∏´‡∏£‡∏∑‡∏≠ Recover
        if self.DashService:IsDashing() or self.DashService:IsRecovering() then
            task.wait(0.1)
            continue
        end
        


        if not self.CurrentTarget or not self.CurrentTarget.Parent then
            self:StopChasing()
            break
        end
        
        -- ‡πÉ‡∏ä‡πâ target ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô DetectionLoop)
        local success, waypoints = PathfindingHelper.ComputePath(
            self.Path,
            self.RootPart.Position,
            self.CurrentTarget.Position
        )
        
        if success and #waypoints > 1 then
            local nextWaypoint = waypoints[2]
            
            if PathfindingHelper.ShouldJump(nextWaypoint) then
                self.ChaseService:SetJumping()
                self.Humanoid.Jump = true
                task.wait(0.3)
                self.ChaseService:ResumeChase()
            end
            
            self.Humanoid:MoveTo(nextWaypoint.Position)
            
            local moveFinished = false
            local moveConnection = self.Humanoid.MoveToFinished:Connect(function()
                moveFinished = true
            end)
            
            local startTime = tick()
            repeat 
                task.wait(0.05)
                if tick() - startTime > 2 then
                    break
                end
            until moveFinished or not self.IsChasing or self.DashService:IsDashing()
            
            moveConnection:Disconnect()
        else
            warn("[Controller] Path failed, moving directly")
            self.Humanoid:MoveTo(self.CurrentTarget.Position)
            task.wait(0.5)
        end
        
        task.wait(SimpleAIConfig.ChaseUpdateInterval)
    end
end


-- ==========================================
-- ‚ú® ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï target ‡∏Ç‡∏ì‡∏∞‡πÑ‡∏•‡πà
-- ==========================================
function SimpleWalkController:UpdateChaseTarget(newTargetPart)
    if self.ChaseService:HasTarget() then
        self.ChaseService:StartChase(newTargetPart)
    end
end




-- ==========================================
-- ‚ú® ‡∏´‡∏¢‡∏∏‡∏î‡πÑ‡∏•‡πà
-- ==========================================
function SimpleWalkController:StopChasing()

    if not self.IsChasing then
        return  -- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏•‡πà‡∏≠‡∏¢‡∏π‡πà ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    end

    self.IsChasing = false
    self.CurrentTarget = nil
    self.OutOfRangeStartTime = nil
    
    -- ‚ú® ‡∏´‡∏¢‡∏∏‡∏î Dash ‡∏î‡πâ‡∏ß‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á Dash ‡∏≠‡∏¢‡∏π‡πà)
    if self.DashService:IsDashing() then
        self.DashService:StopDash()
    end

    -- ‚ú® Phase 4: ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Player ‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    self.DashService:ClearImpactRecords()

    -- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Services
    self.ChaseService:StopChase()
    self.DetectionService:StopDetection()
    
    -- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    self.Humanoid.WalkSpeed = 0
    
    print("[Controller] Stopped chasing")
end



-- ==========================================
-- MAIN LOOP: ‡∏ß‡∏ô‡∏ã‡πâ‡∏≥‡πÄ‡∏î‡∏¥‡∏ô ‚Üí ‡∏´‡∏¢‡∏∏‡∏î ‚Üí ‡πÄ‡∏î‡∏¥‡∏ô
-- ==========================================
function SimpleWalkController:RandomWalkLoop()
	-- ‡∏ß‡∏ô‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ï‡∏≤‡∏¢
	while self.Humanoid.Health > 0 do
		
		-- ==========================================
		-- Phase 1: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô
		-- ==========================================
		self:StartWalking()
		
		-- ‡πÄ‡∏î‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á (‡∏ï‡∏≤‡∏° WalkDuration)
		task.wait(self.WalkDuration)
		
		-- ==========================================
		-- Phase 2: ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å
		-- ==========================================
		self:PauseWalking()
		
		-- ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å (‡∏ï‡∏≤‡∏° IdleDuration)
		task.wait(self.IdleDuration)
		
		-- ‡∏ß‡∏ô‡∏ã‡πâ‡∏≥‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ
	end
	
	-- ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
	print("[Controller]", self.Model.Name, "died. Stopping AI.")
end


-- ==========================================
-- MAIN BEHAVIOR LOOP: ‡πÄ‡∏î‡∏¥‡∏ô/‡∏´‡∏¢‡∏∏‡∏î (‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÑ‡∏•‡πà)
-- ==========================================
function SimpleWalkController:MainBehaviorLoop()
    while self.IsActive and self.Humanoid.Health > 0 do
        
        -- ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏•‡πà‡∏≠‡∏¢‡∏π‡πà ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
        if not self.IsChasing then
            
            -- Phase 1: ‡πÄ‡∏î‡∏¥‡∏ô
            self:StartWalking()
            task.wait(self.WalkDuration)
            
            -- Phase 2: ‡∏´‡∏¢‡∏∏‡∏î
            if not self.IsChasing then
                self:PauseWalking()
                task.wait(self.IdleDuration)
            end
        else
            -- ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏•‡πà ‡∏£‡∏≠
            task.wait(0.5)
        end
    end
    
    print("[Controller]", self.Model.Name, "died. Stopping AI.")
end


-- ==========================================
-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏î‡∏¥‡∏ô: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service + ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Roblox
-- ==========================================

local function tableKeysToString(t)
    if type(t) ~= "table" then return tostring(t) end
    local keys = {}
    for k,_ in pairs(t) do table.insert(keys, tostring(k)) end
    return "[" .. table.concat(keys, ", ") .. "]"
end



function SimpleWalkController:StartWalking()

    if self.IsChasing then return end
    
    if not self.EnemyData then
        error("[Controller] EnemyData is nil!")
    end


    self.WalkService:StartWalking()
    self.EnemyData:SetState(AIState.Walk)
    self.EnemyData.CurrentSpeed = self.EnemyData.WalkSpeed
    self.Humanoid.WalkSpeed = self.EnemyData.CurrentSpeed

    local randomPosition = self:GetRandomPosition()
    self:MoveToPosition(randomPosition)

end



-- ==========================================
-- ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏î‡∏¥‡∏ô: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Service + ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Roblox
-- ==========================================
function SimpleWalkController:PauseWalking()
    -- ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error ‡∏Å‡∏£‡∏ì‡∏µ WalkService ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å inject
    if self.WalkService then
        self.WalkService:PauseWalk()
    else
        warn("[SimpleWalkController] WalkService is nil when trying to pause walking")
    end

if self.EnemyData then
    if self.EnemyData.SetState then
        self.EnemyData:SetState("Idle")
    else
        -- ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ method SetState ‡∏Å‡πá fallback ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ state ‡∏ï‡∏£‡∏á ‡πÜ
        self.EnemyData.CurrentState = "Idle"
    end

    self.EnemyData.CurrentSpeed = 0
end


    if self.Humanoid then
        self.Humanoid.WalkSpeed = 0
    else
        warn("[SimpleWalkController] Humanoid is nil when trying to pause walking")
    end
end

-- ==========================================
-- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï: ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏™‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
-- ==========================================
function SimpleWalkController:Reset()
    self.WalkService:Reset()
    self.ChaseService:StopChase()
    self.DetectionService:ResetDetection()
    self.Humanoid.WalkSpeed = 0
    self.IsChasing = false


       -- ‚ú® ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Dash
    self.DashService:StopDash()


     -- ‚ú® Phase 4: ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Player ‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    self.DashService:ClearImpactRecords()

    self.CurrentTarget = nil --‡πÉ‡∏´‡∏°‡πà
    self.OutOfRangeStartTime = nil -- ‡πÉ‡∏´‡∏°‡πà
end

-- ==========================================
-- ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà: ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
-- ==========================================
function SimpleWalkController:GetRandomPosition()
	local currentPos = self.RootPart.Position
	
	-- ‡∏™‡∏∏‡πà‡∏°‡∏°‡∏∏‡∏° (0-360 ‡∏≠‡∏á‡∏®‡∏≤)
	local randomAngle = math.random() * math.pi * 2
	
	-- ‡∏™‡∏∏‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á (‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Min ‡∏ñ‡∏∂‡∏á Max)
	local randomDistance = math.random(
		self.MinWanderDistance,
		self.WanderRadius
	)
	
	-- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà (‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏ß)
	local offsetX = math.cos(randomAngle) * randomDistance
	local offsetZ = math.sin(randomAngle) * randomDistance
	
	return Vector3.new(
		currentPos.X + offsetX,
		currentPos.Y,  -- Y ‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏ö‡∏¥‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏•‡∏á)
		currentPos.Z + offsetZ
	)
end

-- ==========================================
-- ‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ‡πÉ‡∏ä‡πâ Pathfinding
-- ==========================================
function SimpleWalkController:MoveToPosition(targetPos)
    if not self.EnemyData or self.IsChasing then
        return
    end

    if type(self.EnemyData.IsWalking) ~= "function" then
        self.EnemyData.IsWalking = function(self) 
            return (self.CurrentSpeed or 0) > 0
        end
    end

    local success = pcall(function()
        self.Path:ComputeAsync(self.RootPart.Position, targetPos)
    end)

    if success and self.Path.Status == Enum.PathStatus.Success then
        local waypoints = self.Path:GetWaypoints()
        for i, waypoint in ipairs(waypoints) do
            if self.EnemyData and self.EnemyData.IsWalking and self.EnemyData:IsWalking() and not self.IsChasing then
                if waypoint.Action == Enum.PathWaypointAction.Jump then
                    self.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
                self.Humanoid:MoveTo(waypoint.Position)
                
                local finished = false
                local moveConnection = self.Humanoid.MoveToFinished:Connect(function()
                    finished = true
                end)
                
                local timeoutStart = tick()
                repeat 
                    task.wait(0.1)
                    if self.IsChasing then break end
                until finished or (tick() - timeoutStart > 3)
                
                moveConnection:Disconnect()
            else
                break
            end
        end
    else
        self.Humanoid:MoveTo(targetPos)
        task.wait(2)
    end
end




-- ==========================================
-- Cleanup: ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß
-- ==========================================
function SimpleWalkController:Destroy()
	-- ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Connections ‡∏à‡∏∞ Disconnect ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    self.IsActive = false
    self.IsChasing = false


       -- ‚ú® Disconnect Touch Connection
    if self.TouchConnection then
        self.TouchConnection:Disconnect()
        self.TouchConnection = nil
    end


    self.WalkService = nil
    self.ChaseService = nil
    self.DetectionService = nil
    self.EnemyData = nil
    print("[Controller] Destroyed:", self.Model.Name)
end

return SimpleWalkController